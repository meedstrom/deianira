# -*- org-export-with-smart-quotes: nil; -*-
#+TITLE: Deianira
#+AUTHOR: Martin Edstr√∂m
#+EMAIL: meedstrom@teknik.io
#+LANGUAGE: en

[[https://img.shields.io/badge/license-GPL3+-blue.png]]

#+begin_quote
WARNING: This package has a couple of serious bugs, please don't link to it.
#+end_quote

#+begin_html
<a title="Giulio Bonasone
, CC0, via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:Bust_of_Hercules_and_Dejanira_MET_DP812684.jpg"><img width="256" align="center" alt="Bust of Hercules and Dejanira MET DP812684" src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Bust_of_Hercules_and_Dejanira_MET_DP812684.jpg/256px-Bust_of_Hercules_and_Dejanira_MET_DP812684.jpg"></a>
#+end_html

A [[https://github.com/abo-abo/hydra][hydra]]-based which-key banisher.  [[https://en.wikipedia.org/wiki/Deianira][Deianira]] was the slayer of [[https://gitlab.com/jjzmajic/hercules.el][Hercules]], which is a "which-key-based hydra banisher".

Currently the package is not that generalized and fits my own workflow only, but it took me months to figure out how to even code it, so it might be an useful POC for somebody else.  Although less general than Hercules, it does more in some areas, which could be spun out as separate packages.

** Paradigm

Imagine that after you press the Control key, Emacs behaves as if Control is still pressed for everything you do next, and then that if you press Meta, Emacs switches to behaving as if Meta is pressed.  That's basically what this package does.

The angel's in the details, however.  If it only did the above, that'd be boring, but the sum of its parts is a whole new input paradigm.

The paradigm is:

1. All hotkeys get a place in a hydra; hydra-ize the entire Emacs keymap.
2. Control, Alt, Meta, Super and Hyper all become "leader keys" which pop up a hydra specific to each.
3. "Flatten" the keymap: we forbid any difference between the keys ~C-x C-e~ and ~C-x e~; we bind both to the same command, so it won't matter if you keep holding down Control or not.
   - Necessary since I want every keybinding to be typeable by pressing each key in isolation separately, e.g. the sequence ~<ctl> x e~ maps to ~C-x e~, but a sequence like ~<ctl> x <ctl> e~ is just weird (not to mention a downgrade from ~C-x C-e~), and I'd rather use the Control key to return to the root level.
4. Forbid mixing modifiers: we don't allow key sequences like ~C-M-f~ or ~M-%~ (the percent sign implies you pressed Shift), or -- shudder --  ~C-c M-o~.  We allow only hotkeys that use a single modifier.
5. Forbid the Shift key, everywhere.  That means regardless of which hydra you're in, typing ~F~ or ~(~ just self-inserts those characters and pops the hydra.
   - My biggest gripe with Vim is its excessive use of capitals, that I find about as uncomfortable as Control combos, a strange oversight in its design.
6. Forbid Space and Enter in any hotkey.  Like the capitals, these always self-insert.
7. Forbid Backspace in any hotkey.  This is used to travel "up" the key sequence, i.e. return to the parent hydra, much like if you type a command in Vim's /ex/ command line and then backspace because you changed your mind -- there's no need to retype most of the command from scratch.  It's cognate to =which-key-undo-key=.

The consequences are:

1. We can do transient exits.  In the Control hydra, we can press e.g. ~M-f~ like usual to move forward by word, without exiting the Control hydra.  This applies to all our hydras, even cases like the Control-X-prefix, so instead of ~C-x t C-n C-x t C-n C-x t~...  you can stay in the Control-X-prefix and do ~t C-n t C-n t~... This would not be possible if we allowed more than one modifier in a hotkey.
2. We can feel as though we are in Vim's Normal mode and yet not have to press =i= or =a= to enter Insert mode, because capital letters (including capital symbols such as parens), spaces and newlines will self-insert and exit the hydra at the same time.  This works so well because the first character you type is frequently from this set, and it's nearly free because we didn't want Shift hotkeys anyway.  I might extend the set to include the period, comma and apostrophe.
3. I find it more intuitive than [[https://github.com/emacsorphanage/god-mode][god-mode]]. There is no weird leader key like ~<escape>~ or whatever you'd choose for it, or the Spacemacs ~M-m~, instead you press the same modifier keys you always have, and Space doesn't have any special behavior.
4. We pretty much get modal editing without its drawbacks.  Both due to the fast switch to "insert mode", and the ability to transiently-exit any mode, i.e. to access any mode's commands from any mode.  For example, instead of entering a mode, running a command, exiting it, and returning to whichever mode you were in, as with the hypothetical sequence ~<meta> f <meta> <ctl>~, it's faster to just ~M-f~ and remain where you were.  This is the one /valid/ use of modifiers, and it's a shame most "leader key" implementations don't do this.
   - To clarify, I use "mode" to mean the root level of the Control, Meta or Super hydras, or the state of having no active hydra ("insert mode").
5. We can use a compressed hotkey notation, such as =Cxp= instead of =C-x p=, since it's still unambiguous.

My motivations were:

- I asked myself how one would use Emacs with an [[https://olkb.com/][OLKB]] Planck or smaller keyboard, not that I have one, but such constraints led me to this paradigm.  Essentially, commands are all or mainly bound to lowercase letters, and despite that keyboard's smallness, it does not lack any of those.  As a consequence it won't have to use its "Raise" or "Lower" hardware modes just to access a hotkey.
- I want a modifier-free life (even Shift-free), and I decided I don't mind typing more to get that.  Longer key sequences beat modifiers.  Thanks to the notion of a hydra, we can still spam commands, so there's surprisingly little typing.  Quality-of-life improvements like the Backspace function discussed earlier compound this.

** Past challenges

Multiple challenges needed solving.

First, to continuously, repeatedly do the following things:
- Flatten the keymap, as discussed earlier
- Undo shift bindings and other disallowed bindings
- +Sync super map with control map+
- Redefine hydras as necessary to match the local bindings

(It was a performance nightmare for a while.)

Second, to turn modifier keys into leader keys, IOW to make it possible to press the Control, Meta or Super key by itself.  The idea is like the macOS/Windows/X11 "sticky keys" accessibility feature, but instead of modifying the next key only, pressing Control pops up a hydra that reflects all Control bindings, and you can stay in the hydra, so the idea is sticky keys on steroids.  At the same time, they function as they always did when chorded with another key, so there is no destruction of workflow in this regard.

** Setup

Chat to me, I'll walk you through.

The problems are
- We need an external program to get the Control, Meta and Super keys to send the F35, F34 and F33 key events, respectively.  I have been using [[https://github.com/alols/xcape][xcape]], and you can reproduce the setup by calling =dei-xmodmap-reload= and =dei-xcape-reload=, but xcape is buggy and unmaintained so I should write instructions for setting up [[https://gitlab.com/interception/linux/plugins/dual-function-keys][interception-tools]] instead.
- It's up to the user to choose which keys to keep when "flattening" the keymap -- do you use ~C-x f~ or ~C-x C-f~ more?
- We should come up with good suggestions for new places to put the commands of ~C-<SPC>~ and ~C-x <SPC>~ and certain others.
- Though optional, we should teach the user to reclaim hotkey real estate with a set of suggested unbinds or rebinds. ~M-q~ and ~C-q~ are prime examples.
- I'll develop to this section when the package matures a bit.

** Concepts
*** Stem and leaf
:CUSTOM_ID: stemleaf

The source code makes a lot of references to "stem" and "leaf", which are defined most succinctly by =dei--get-leaf= and its complement, but in human language, the leaf is the last part of a key description (the kind of string you'd pass to =kbd=) that can correspond to an event.  The way Emacs thinks of it is different, and a necessity from the realities of keyboards: to our keyboards, a key like ~C-<return>~ is a /single/ event, not two.  A control-modified character is simply a different character altogether.  This is way too impractical for me to work with, since it maps poorly to how I think about hotkeys.

If you dive into the source, be aware of what a "stem" is.  A full key description like =C-x a= is split /without deleting any character/ into the stem "C-x " and the leaf "a". Note the trailing space in the stem.  This is necessary to disambiguate the stem "C-x " from the valid key description =C-x=.  Other examples follow.

| Key description | Stem   | Leaf       |
| =C-x a=           | "C-x " | "a"        |
| =C-x=             | "C-"   | "x"        |
| =C-<M-return>=    | "C-M-" | "<return>" |

If programming against this library, always wrap a key description in =dei--normalize= to safeguard against odd descriptions like =C-<M-return>=: the other functions expect a normalized key description, in this case =C-M-<return>=.

*** Dire hydra

I used to have around ~80 hydras with some 500 heads each. I called these dire hydras due only to their size.  Now I've effectivised them with =defhydra='s =:foreign-keys run= among other tricks, but the behavior is still fully specified, fully /intended/.

My conception of a dire hydra is a hydra that attempts to faithfully represent all or part of the keyboard in the local context.  A keymap such as =org-mode-map= does not qualify as such a context; rather, by context I mean the composite of all currently enabled keymaps, i.e. the computed buffer-local bindings as gotten from =describe-bindings=.  As for representing only part of the keyboard, that can happen if e.g. you have a split keyboard or you want to only represent the alphabetic keys.  Whatever set of keys you pick, it implies that more than one dire hydra exists for that same set, because of key sequences and different modifier keys.

The dire hydra stands between you and the keyboard, like a monster guarding the gates of Hell.  You have to go through it if you want to go to Hell.  That makes the hydra dire.  If there was any way to slip past it, it would just be another hydra.  It's like how a bucket of pebbles meant to count sheep is only meaningful if the count of pebbles actually matches the count of sheep in the enclosure -- otherwise, it's just a bucket of pebbles.

** Thanks

I owe thanks to [[https://github.com/abo-abo][abo-abo]] and the other contributors to Hydra.  If I'd had to wrangle =god-mode= or =which-key= to my purposes, I would have needed to know a lot more about the Emacs hotkey internals than I did starting out.  With Hydra, I could just hack and experiment, and incrementally arrive to where I am.  It's a friendly API for doing whatever you want, so it's a fine example of the Emacs spirit.
