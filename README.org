# -*- org-export-with-smart-quotes: nil; -*-
#+TITLE: Deianira
#+AUTHOR: Martin Edstr√∂m
#+EMAIL: meedstrom@teknik.io
#+LANGUAGE: en

# FIXME: make a small picture
# #+ATTR_HTML: :width 200 :align right
# [[file:Deianera.jpg]]

#+begin_quote
WARNING: This package has a couple of serious bugs, please don't link to it on Reddit or similar for now.
#+end_quote

An automatic [[https://github.com/abo-abo/hydra][hydra]]-based which-key banisher.

The inverse of [[https://gitlab.com/jjzmajic/hercules.el][hercules.el]], which is "an auto-magical, which-key-based hydra banisher".  From Greek mythology, [[https://en.wikipedia.org/wiki/Deianira][Deianira]] or Deianeira was the wife of Hercules and the one who slew him.

Or that's what it could be: currently the package is not that generalized and fits my own workflow only, but it took sweat and tears to develop so I thought it worth publishing.  It includes a library of functions for [[Stem and leaf][manipulating key descriptions]]. In addition, it does more than Hercules in some areas, which could be spun out as separate packages at some point.

** Paradigm

Imagine that after you press the Control key, Emacs behaves as if Control is still pressed for everything you do next, and then that if you press Meta, Emacs switches to behaving as if Meta is pressed.  That's basically what this package does.

The angel's in the details, however.  If it was only the above, that'd be boring, but the sum of its parts is a whole new input paradigm.

The paradigm is:

1. All hotkeys get a place in a hydra.  That's right, hydra-ize the entire Emacs keymap.
2. Control, Meta/Alt and Super all become "leader keys" which pop up a hydra specific to them.
3. "Flatten" the keymap: we forbid there to be any difference between the keys ~C-x C-e~ and ~C-x e~; we bind both to the same thing, so it won't matter if you keep holding down Control or not.
   - Necessary since I want every keybinding to be typeable by pressing each key in isolation separately, e.g. the sequence ~<ctl> x e~ maps to ~C-x e~, but a sequence like ~<ctl> x <ctl> e~ is weird, and I'd rather use the Control key to return to the root level.
4. Forbid mixing modifiers: we don't allow key sequences like ~C-M-f~ or ~M-%~ (the percent sign implies you pressed Shift), or -- shudder --  ~C-c M-o~.  We allow only hotkeys that use a single modifier.
5. Forbid the Shift key, everywhere.  That includes any capital character, like ~F~, in any subkeymap, so that includes hotkeys like ~C-h F~.
   - My biggest gripe with Vim is its excessive use of capitals, that I find about as uncomfortable as Control combos, a strange oversight in its design.
6. Forbid Space and Enter in any hotkey.  Let these always insert space or newline.
7. Forbid Backspace.  This is used to travel "up" the key sequence, i.e. return to the parent hydra, much like if you type a command in Vim's /ex/ command line and then backspace because you changed your mind -- there's no need to retype most of the command from scratch.  It's cognate to =which-key-undo-key=.

The consequences are:

1. We can do transient exits.  In the Control hydra, we can press e.g. ~M-f~ like usual to move forward by word, without exiting the Control hydra.  This applies to all our hydras, even cases like the Control-X-prefix, so instead of ~C-x t C-n C-x t C-n C-x t~...  you can stay in the Control-X-prefix and do ~t C-n t C-n t~... This would not be possible if we allowed more than one modifier in a hotkey.
2. We can feel as though we are in Vim's Normal mode and yet not have to press =i= or =a= to enter Insert mode, because capital letters (including capital symbols such as parens), spaces and newlines will self-insert and exit the hydra at the same time.  This works because the first character you type is frequently from this set.  I might extend that to include the period, comma and apostrophe.
3. I find it both more powerful than god-mode, and more intuitive. If you know Emacs hotkeys, you've already learned this.
4. We pretty much get modal editing without its drawbacks.  Both due to the fast switch to "insert mode", and the ability to transiently-exit any "mode", i.e. to access any mode's commands from any mode.
   - To clarify, I use "mode" means the root level of the control, meta or super hydras, or the state of having no active hydra ("insert mode").
5. We can use a compressed hotkey notation, such as =Cxp= instead of =C-x p=, since it's still unambiguous.

My motivations were:

- I asked myself how one would use Emacs with an OLKB Planck or smaller keyboard, not that I have one, but such constraints led me to this paradigm.  Essentially, commands are all or mainly bound to lowercase letters, and despite that keyboard's smallness, it does not lack any of those.  As a consequence it won't have to use its "Raise" or "Lower" hardware modes just to access a hotkey.
- I want a modifier-free life (even Shift-free), and I decided I don't mind typing more to get that.  Longer key sequences beat modifiers.  Thanks to the notion of a hydra, we can still spam commands, so there's surprisingly little typing.  This is compounded by quality-of-life improvements like the Backspace function discussed earlier -- seriously addictive.

** Past challenges

Multiple challenges needed solving.

First, to continuously do the following things:
- Flatten the keymap, as discussed earlier
- Undo shift bindings and other disallowed bindings
- +Sync super map with control map+
- Redefine hydras as necessary to match the local bindings
  + NOT easy

(It was a performance nightmare for a while.)

Second, to turn modifier keys into leader keys, IOW to make it possible to press the Control, Meta or Super key by itself.  The idea is like the macOS/Windows/X11 "sticky keys" accessibility feature, but instead of modifying the next key only, pressing Control pops up a hydra that reflects all Control bindings, and you can stay in the hydra, so the idea is sticky keys on steroids.  At the same time, they function as they always did when chorded with another key, so there is no destruction of workflow in this regard.

** Setup

Chat to me, I'll walk you through.

The problems are
- We need an external program to get the Control, Meta and Super keys to send the F35, F34 and F33 key events, respectively.  I have been using =xcape=, and you can reproduce it by calling =dei-xmodmap-reload= and =dei-xcape-reload=, but xcape is buggy and unmaintained -- sometimes there is a severe latency issue -- so I should write instructions for setting up [[https://gitlab.com/interception/linux/plugins/dual-function-keys][interception-tools]] instead.
- It's up to the user to choose which keys to keep when "flattening" the keymap -- do you use ~C-x f~ or ~C-x C-f~ more?
- We should come up with good suggestions for new places to put the commands of ~C-<SPC>~ and ~C-x <SPC>~ and certain others.
- Though optional, we should teach the user to reclaim hotkey real estate with a set of suggested unbinds or rebinds. ~M-q~ and ~C-q~ are prime examples.
- I'll develop to this section when the package matures a bit.

** Concepts
*** Stem and leaf

The source code makes a lot of references to "stem" and "leaf", which are defined most succinctly by =dei--get-leaf= and its complement, but in human language, the leaf is the last part of a key description (the kind of string you'd pass to =kbd=) that can correspond to an event.  The way Emacs thinks of it is different, and a necessity from the realities of keyboards: a key like ~C-<return>~ is a /single/ event, not two.  A control-modified character is simply a different character altogether.  This is way too impractical for me to work with, since it maps poorly to how I think about hotkeys.

If you dive into the source, be aware of what a "stem" is.  A full key description like "=C-x a=" is split /without deleting any character/ into the stem "=C-x ==" and the leaf ="a"=. Note the trailing space in the stem.  This is necessary to disambiguate the stem ="C-x "= from the valid key description ="C-x"=.  Other examples follow.

| Key description | Stem   | Leaf       |
| =C-x a=           | ="C-x "= | ="a"=        |
| =C-x=             | ="C-"=   | ="x"=        |
| =C-<M-return>=    | ="C-M-"= | ="<return>"= |

If programming against this library, always wrap a key description in =dei--normalize= to safeguard against odd descriptions like =C-<M-return>=: the other functions expect a normalized key description, in this case =C-M-<return>=.
*** Dire hydra
An automatically generated hydra that covers the keyboard.
